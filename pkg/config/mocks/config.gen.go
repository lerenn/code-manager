// Code generated by MockGen. DO NOT EDIT.
// Source: config.go
//
// Generated by this command:
//
//	mockgen -source=config.go -destination=mocks/config.gen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	config "github.com/lerenn/code-manager/pkg/config"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CreateConfigDirectory mocks base method.
func (m *MockManager) CreateConfigDirectory(configPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigDirectory", configPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConfigDirectory indicates an expected call of CreateConfigDirectory.
func (mr *MockManagerMockRecorder) CreateConfigDirectory(configPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigDirectory", reflect.TypeOf((*MockManager)(nil).CreateConfigDirectory), configPath)
}

// DefaultConfig mocks base method.
func (m *MockManager) DefaultConfig() config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultConfig")
	ret0, _ := ret[0].(config.Config)
	return ret0
}

// DefaultConfig indicates an expected call of DefaultConfig.
func (mr *MockManagerMockRecorder) DefaultConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultConfig", reflect.TypeOf((*MockManager)(nil).DefaultConfig))
}

// EnsureConfigFile mocks base method.
func (m *MockManager) EnsureConfigFile(configPath string) (config.Config, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureConfigFile", configPath)
	ret0, _ := ret[0].(config.Config)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnsureConfigFile indicates an expected call of EnsureConfigFile.
func (mr *MockManagerMockRecorder) EnsureConfigFile(configPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureConfigFile", reflect.TypeOf((*MockManager)(nil).EnsureConfigFile), configPath)
}

// LoadConfig mocks base method.
func (m *MockManager) LoadConfig(configPath string) (config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", configPath)
	ret0, _ := ret[0].(config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfig indicates an expected call of LoadConfig.
func (mr *MockManagerMockRecorder) LoadConfig(configPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockManager)(nil).LoadConfig), configPath)
}

// LoadConfigStrict mocks base method.
func (m *MockManager) LoadConfigStrict(configPath string) (config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfigStrict", configPath)
	ret0, _ := ret[0].(config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfigStrict indicates an expected call of LoadConfigStrict.
func (mr *MockManagerMockRecorder) LoadConfigStrict(configPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfigStrict", reflect.TypeOf((*MockManager)(nil).LoadConfigStrict), configPath)
}

// SaveConfig mocks base method.
func (m *MockManager) SaveConfig(arg0 config.Config, configPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", arg0, configPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockManagerMockRecorder) SaveConfig(arg0, configPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockManager)(nil).SaveConfig), arg0, configPath)
}

// ValidateBasePath mocks base method.
func (m *MockManager) ValidateBasePath(basePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBasePath", basePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBasePath indicates an expected call of ValidateBasePath.
func (mr *MockManagerMockRecorder) ValidateBasePath(basePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBasePath", reflect.TypeOf((*MockManager)(nil).ValidateBasePath), basePath)
}
