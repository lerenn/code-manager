// Code generated by MockGen. DO NOT EDIT.
// Source: prompt.go
//
// Generated by this command:
//
//	mockgen -source=prompt.go -destination=mocks/prompt.gen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPrompter is a mock of Prompter interface.
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
	isgomock struct{}
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter.
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance.
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// PromptForConfirmation mocks base method.
func (m *MockPrompter) PromptForConfirmation(message string, defaultYes bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForConfirmation", message, defaultYes)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForConfirmation indicates an expected call of PromptForConfirmation.
func (mr *MockPrompterMockRecorder) PromptForConfirmation(message, defaultYes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForConfirmation", reflect.TypeOf((*MockPrompter)(nil).PromptForConfirmation), message, defaultYes)
}

// PromptForRepositoriesDir mocks base method.
func (m *MockPrompter) PromptForRepositoriesDir(defaultRepositoriesDir string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForRepositoriesDir", defaultRepositoriesDir)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForRepositoriesDir indicates an expected call of PromptForRepositoriesDir.
func (mr *MockPrompterMockRecorder) PromptForRepositoriesDir(defaultRepositoriesDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForRepositoriesDir", reflect.TypeOf((*MockPrompter)(nil).PromptForRepositoriesDir), defaultRepositoriesDir)
}

// PromptForStatusFile mocks base method.
func (m *MockPrompter) PromptForStatusFile(defaultStatusFile string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForStatusFile", defaultStatusFile)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForStatusFile indicates an expected call of PromptForStatusFile.
func (mr *MockPrompterMockRecorder) PromptForStatusFile(defaultStatusFile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForStatusFile", reflect.TypeOf((*MockPrompter)(nil).PromptForStatusFile), defaultStatusFile)
}

// PromptForWorkspacesDir mocks base method.
func (m *MockPrompter) PromptForWorkspacesDir(defaultWorkspacesDir string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForWorkspacesDir", defaultWorkspacesDir)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptForWorkspacesDir indicates an expected call of PromptForWorkspacesDir.
func (mr *MockPrompterMockRecorder) PromptForWorkspacesDir(defaultWorkspacesDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForWorkspacesDir", reflect.TypeOf((*MockPrompter)(nil).PromptForWorkspacesDir), defaultWorkspacesDir)
}
