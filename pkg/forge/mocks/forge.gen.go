// Code generated by MockGen. DO NOT EDIT.
// Source: forge.go
//
// Generated by this command:
//
//	mockgen -source=forge.go -destination=mocks/forge.gen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	forge "github.com/lerenn/code-manager/pkg/forge"
	issue "github.com/lerenn/code-manager/pkg/issue"
	gomock "go.uber.org/mock/gomock"
)

// MockForge is a mock of Forge interface.
type MockForge struct {
	ctrl     *gomock.Controller
	recorder *MockForgeMockRecorder
	isgomock struct{}
}

// MockForgeMockRecorder is the mock recorder for MockForge.
type MockForgeMockRecorder struct {
	mock *MockForge
}

// NewMockForge creates a new mock instance.
func NewMockForge(ctrl *gomock.Controller) *MockForge {
	mock := &MockForge{ctrl: ctrl}
	mock.recorder = &MockForgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForge) EXPECT() *MockForgeMockRecorder {
	return m.recorder
}

// GenerateBranchName mocks base method.
func (m *MockForge) GenerateBranchName(issueInfo *issue.Info) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBranchName", issueInfo)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateBranchName indicates an expected call of GenerateBranchName.
func (mr *MockForgeMockRecorder) GenerateBranchName(issueInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBranchName", reflect.TypeOf((*MockForge)(nil).GenerateBranchName), issueInfo)
}

// GetIssueInfo mocks base method.
func (m *MockForge) GetIssueInfo(issueRef string) (*issue.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueInfo", issueRef)
	ret0, _ := ret[0].(*issue.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueInfo indicates an expected call of GetIssueInfo.
func (mr *MockForgeMockRecorder) GetIssueInfo(issueRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueInfo", reflect.TypeOf((*MockForge)(nil).GetIssueInfo), issueRef)
}

// Name mocks base method.
func (m *MockForge) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockForgeMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockForge)(nil).Name))
}

// ParseIssueReference mocks base method.
func (m *MockForge) ParseIssueReference(issueRef string) (*issue.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseIssueReference", issueRef)
	ret0, _ := ret[0].(*issue.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseIssueReference indicates an expected call of ParseIssueReference.
func (mr *MockForgeMockRecorder) ParseIssueReference(issueRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseIssueReference", reflect.TypeOf((*MockForge)(nil).ParseIssueReference), issueRef)
}

// ValidateForgeRepository mocks base method.
func (m *MockForge) ValidateForgeRepository(repoPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateForgeRepository", repoPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateForgeRepository indicates an expected call of ValidateForgeRepository.
func (mr *MockForgeMockRecorder) ValidateForgeRepository(repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateForgeRepository", reflect.TypeOf((*MockForge)(nil).ValidateForgeRepository), repoPath)
}

// MockManagerInterface is a mock of ManagerInterface interface.
type MockManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockManagerInterfaceMockRecorder is the mock recorder for MockManagerInterface.
type MockManagerInterfaceMockRecorder struct {
	mock *MockManagerInterface
}

// NewMockManagerInterface creates a new mock instance.
func NewMockManagerInterface(ctrl *gomock.Controller) *MockManagerInterface {
	mock := &MockManagerInterface{ctrl: ctrl}
	mock.recorder = &MockManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerInterface) EXPECT() *MockManagerInterfaceMockRecorder {
	return m.recorder
}

// GetForge mocks base method.
func (m *MockManagerInterface) GetForge(name string) (forge.Forge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForge", name)
	ret0, _ := ret[0].(forge.Forge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForge indicates an expected call of GetForge.
func (mr *MockManagerInterfaceMockRecorder) GetForge(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForge", reflect.TypeOf((*MockManagerInterface)(nil).GetForge), name)
}

// GetForgeForRepository mocks base method.
func (m *MockManagerInterface) GetForgeForRepository(repoPath string) (forge.Forge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForgeForRepository", repoPath)
	ret0, _ := ret[0].(forge.Forge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForgeForRepository indicates an expected call of GetForgeForRepository.
func (mr *MockManagerInterfaceMockRecorder) GetForgeForRepository(repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForgeForRepository", reflect.TypeOf((*MockManagerInterface)(nil).GetForgeForRepository), repoPath)
}
