// Code generated by MockGen. DO NOT EDIT.
// Source: worktree.go
//
// Generated by this command:
//
//	mockgen -source=worktree.go -destination=mocks/worktree.gen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	logger "github.com/lerenn/code-manager/pkg/logger"
	worktree "github.com/lerenn/code-manager/pkg/worktree"
	gomock "go.uber.org/mock/gomock"
)

// MockWorktree is a mock of Worktree interface.
type MockWorktree struct {
	ctrl     *gomock.Controller
	recorder *MockWorktreeMockRecorder
	isgomock struct{}
}

// MockWorktreeMockRecorder is the mock recorder for MockWorktree.
type MockWorktreeMockRecorder struct {
	mock *MockWorktree
}

// NewMockWorktree creates a new mock instance.
func NewMockWorktree(ctrl *gomock.Controller) *MockWorktree {
	mock := &MockWorktree{ctrl: ctrl}
	mock.recorder = &MockWorktreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorktree) EXPECT() *MockWorktreeMockRecorder {
	return m.recorder
}

// AddToStatus mocks base method.
func (m *MockWorktree) AddToStatus(params worktree.AddToStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToStatus", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToStatus indicates an expected call of AddToStatus.
func (mr *MockWorktreeMockRecorder) AddToStatus(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToStatus", reflect.TypeOf((*MockWorktree)(nil).AddToStatus), params)
}

// BuildPath mocks base method.
func (m *MockWorktree) BuildPath(repoURL, remoteName, branch string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildPath", repoURL, remoteName, branch)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildPath indicates an expected call of BuildPath.
func (mr *MockWorktreeMockRecorder) BuildPath(repoURL, remoteName, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPath", reflect.TypeOf((*MockWorktree)(nil).BuildPath), repoURL, remoteName, branch)
}

// CleanupDirectory mocks base method.
func (m *MockWorktree) CleanupDirectory(worktreePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupDirectory", worktreePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupDirectory indicates an expected call of CleanupDirectory.
func (mr *MockWorktreeMockRecorder) CleanupDirectory(worktreePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupDirectory", reflect.TypeOf((*MockWorktree)(nil).CleanupDirectory), worktreePath)
}

// Create mocks base method.
func (m *MockWorktree) Create(params worktree.CreateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWorktreeMockRecorder) Create(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWorktree)(nil).Create), params)
}

// Delete mocks base method.
func (m *MockWorktree) Delete(params worktree.DeleteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWorktreeMockRecorder) Delete(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWorktree)(nil).Delete), params)
}

// EnsureBranchExists mocks base method.
func (m *MockWorktree) EnsureBranchExists(repoPath, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureBranchExists", repoPath, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureBranchExists indicates an expected call of EnsureBranchExists.
func (mr *MockWorktreeMockRecorder) EnsureBranchExists(repoPath, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureBranchExists", reflect.TypeOf((*MockWorktree)(nil).EnsureBranchExists), repoPath, branch)
}

// Exists mocks base method.
func (m *MockWorktree) Exists(repoPath, branch string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", repoPath, branch)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockWorktreeMockRecorder) Exists(repoPath, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockWorktree)(nil).Exists), repoPath, branch)
}

// GetPath mocks base method.
func (m *MockWorktree) GetPath(repoPath, branch string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath", repoPath, branch)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPath indicates an expected call of GetPath.
func (mr *MockWorktreeMockRecorder) GetPath(repoPath, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockWorktree)(nil).GetPath), repoPath, branch)
}

// RemoveFromStatus mocks base method.
func (m *MockWorktree) RemoveFromStatus(repoURL, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromStatus", repoURL, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromStatus indicates an expected call of RemoveFromStatus.
func (mr *MockWorktreeMockRecorder) RemoveFromStatus(repoURL, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromStatus", reflect.TypeOf((*MockWorktree)(nil).RemoveFromStatus), repoURL, branch)
}

// SetLogger mocks base method.
func (m *MockWorktree) SetLogger(arg0 logger.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockWorktreeMockRecorder) SetLogger(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockWorktree)(nil).SetLogger), arg0)
}

// ValidateCreation mocks base method.
func (m *MockWorktree) ValidateCreation(params worktree.ValidateCreationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCreation", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCreation indicates an expected call of ValidateCreation.
func (mr *MockWorktreeMockRecorder) ValidateCreation(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCreation", reflect.TypeOf((*MockWorktree)(nil).ValidateCreation), params)
}

// ValidateDeletion mocks base method.
func (m *MockWorktree) ValidateDeletion(params worktree.ValidateDeletionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDeletion", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateDeletion indicates an expected call of ValidateDeletion.
func (mr *MockWorktreeMockRecorder) ValidateDeletion(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDeletion", reflect.TypeOf((*MockWorktree)(nil).ValidateDeletion), params)
}
