// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mocks/repository.gen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	logger "github.com/lerenn/code-manager/pkg/logger"
	repository "github.com/lerenn/code-manager/pkg/mode/repository"
	status "github.com/lerenn/code-manager/pkg/status"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddWorktreeToStatus mocks base method.
func (m *MockRepository) AddWorktreeToStatus(params repository.StatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorktreeToStatus", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWorktreeToStatus indicates an expected call of AddWorktreeToStatus.
func (mr *MockRepositoryMockRecorder) AddWorktreeToStatus(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorktreeToStatus", reflect.TypeOf((*MockRepository)(nil).AddWorktreeToStatus), params)
}

// AutoAddRepositoryToStatus mocks base method.
func (m *MockRepository) AutoAddRepositoryToStatus(repoURL, repoPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoAddRepositoryToStatus", repoURL, repoPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoAddRepositoryToStatus indicates an expected call of AutoAddRepositoryToStatus.
func (mr *MockRepositoryMockRecorder) AutoAddRepositoryToStatus(repoURL, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoAddRepositoryToStatus", reflect.TypeOf((*MockRepository)(nil).AutoAddRepositoryToStatus), repoURL, repoPath)
}

// ConstructRemoteURL mocks base method.
func (m *MockRepository) ConstructRemoteURL(originURL, remoteSource, repoName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructRemoteURL", originURL, remoteSource, repoName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstructRemoteURL indicates an expected call of ConstructRemoteURL.
func (mr *MockRepositoryMockRecorder) ConstructRemoteURL(originURL, remoteSource, repoName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructRemoteURL", reflect.TypeOf((*MockRepository)(nil).ConstructRemoteURL), originURL, remoteSource, repoName)
}

// CreateWorktree mocks base method.
func (m *MockRepository) CreateWorktree(branch string, opts ...repository.CreateWorktreeOpts) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{branch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorktree", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorktree indicates an expected call of CreateWorktree.
func (mr *MockRepositoryMockRecorder) CreateWorktree(branch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{branch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorktree", reflect.TypeOf((*MockRepository)(nil).CreateWorktree), varargs...)
}

// DeleteWorktree mocks base method.
func (m *MockRepository) DeleteWorktree(branch string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorktree", branch, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorktree indicates an expected call of DeleteWorktree.
func (mr *MockRepositoryMockRecorder) DeleteWorktree(branch, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorktree", reflect.TypeOf((*MockRepository)(nil).DeleteWorktree), branch, force)
}

// DetermineProtocol mocks base method.
func (m *MockRepository) DetermineProtocol(url string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetermineProtocol", url)
	ret0, _ := ret[0].(string)
	return ret0
}

// DetermineProtocol indicates an expected call of DetermineProtocol.
func (mr *MockRepositoryMockRecorder) DetermineProtocol(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetermineProtocol", reflect.TypeOf((*MockRepository)(nil).DetermineProtocol), url)
}

// ExtractHostFromURL mocks base method.
func (m *MockRepository) ExtractHostFromURL(url string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractHostFromURL", url)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtractHostFromURL indicates an expected call of ExtractHostFromURL.
func (mr *MockRepositoryMockRecorder) ExtractHostFromURL(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractHostFromURL", reflect.TypeOf((*MockRepository)(nil).ExtractHostFromURL), url)
}

// ExtractRepoNameFromFullPath mocks base method.
func (m *MockRepository) ExtractRepoNameFromFullPath(fullPath string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractRepoNameFromFullPath", fullPath)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtractRepoNameFromFullPath indicates an expected call of ExtractRepoNameFromFullPath.
func (mr *MockRepositoryMockRecorder) ExtractRepoNameFromFullPath(fullPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractRepoNameFromFullPath", reflect.TypeOf((*MockRepository)(nil).ExtractRepoNameFromFullPath), fullPath)
}

// HandleRemoteManagement mocks base method.
func (m *MockRepository) HandleRemoteManagement(repoURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRemoteManagement", repoURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRemoteManagement indicates an expected call of HandleRemoteManagement.
func (mr *MockRepositoryMockRecorder) HandleRemoteManagement(repoURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRemoteManagement", reflect.TypeOf((*MockRepository)(nil).HandleRemoteManagement), repoURL)
}

// IsGitRepository mocks base method.
func (m *MockRepository) IsGitRepository() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGitRepository")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsGitRepository indicates an expected call of IsGitRepository.
func (mr *MockRepositoryMockRecorder) IsGitRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGitRepository", reflect.TypeOf((*MockRepository)(nil).IsGitRepository))
}

// ListWorktrees mocks base method.
func (m *MockRepository) ListWorktrees() ([]status.WorktreeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorktrees")
	ret0, _ := ret[0].([]status.WorktreeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorktrees indicates an expected call of ListWorktrees.
func (mr *MockRepositoryMockRecorder) ListWorktrees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorktrees", reflect.TypeOf((*MockRepository)(nil).ListWorktrees))
}

// LoadWorktree mocks base method.
func (m *MockRepository) LoadWorktree(remoteSource, branchName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadWorktree", remoteSource, branchName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadWorktree indicates an expected call of LoadWorktree.
func (mr *MockRepositoryMockRecorder) LoadWorktree(remoteSource, branchName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadWorktree", reflect.TypeOf((*MockRepository)(nil).LoadWorktree), remoteSource, branchName)
}

// RemoveWorktreeFromStatus mocks base method.
func (m *MockRepository) RemoveWorktreeFromStatus(repoURL, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWorktreeFromStatus", repoURL, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWorktreeFromStatus indicates an expected call of RemoveWorktreeFromStatus.
func (mr *MockRepositoryMockRecorder) RemoveWorktreeFromStatus(repoURL, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWorktreeFromStatus", reflect.TypeOf((*MockRepository)(nil).RemoveWorktreeFromStatus), repoURL, branch)
}

// SetLogger mocks base method.
func (m *MockRepository) SetLogger(arg0 logger.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockRepositoryMockRecorder) SetLogger(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockRepository)(nil).SetLogger), arg0)
}

// Validate mocks base method.
func (m *MockRepository) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockRepositoryMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockRepository)(nil).Validate))
}

// ValidateGitConfiguration mocks base method.
func (m *MockRepository) ValidateGitConfiguration(workDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateGitConfiguration", workDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateGitConfiguration indicates an expected call of ValidateGitConfiguration.
func (mr *MockRepositoryMockRecorder) ValidateGitConfiguration(workDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateGitConfiguration", reflect.TypeOf((*MockRepository)(nil).ValidateGitConfiguration), workDir)
}

// ValidateGitStatus mocks base method.
func (m *MockRepository) ValidateGitStatus() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateGitStatus")
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateGitStatus indicates an expected call of ValidateGitStatus.
func (mr *MockRepositoryMockRecorder) ValidateGitStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateGitStatus", reflect.TypeOf((*MockRepository)(nil).ValidateGitStatus))
}

// ValidateOriginRemote mocks base method.
func (m *MockRepository) ValidateOriginRemote() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOriginRemote")
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateOriginRemote indicates an expected call of ValidateOriginRemote.
func (mr *MockRepositoryMockRecorder) ValidateOriginRemote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOriginRemote", reflect.TypeOf((*MockRepository)(nil).ValidateOriginRemote))
}

// ValidateRepository mocks base method.
func (m *MockRepository) ValidateRepository(params repository.ValidationParams) (*repository.ValidationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRepository", params)
	ret0, _ := ret[0].(*repository.ValidationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRepository indicates an expected call of ValidateRepository.
func (mr *MockRepositoryMockRecorder) ValidateRepository(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRepository", reflect.TypeOf((*MockRepository)(nil).ValidateRepository), params)
}

// ValidateWorktreeExists mocks base method.
func (m *MockRepository) ValidateWorktreeExists(repoURL, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateWorktreeExists", repoURL, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateWorktreeExists indicates an expected call of ValidateWorktreeExists.
func (mr *MockRepositoryMockRecorder) ValidateWorktreeExists(repoURL, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateWorktreeExists", reflect.TypeOf((*MockRepository)(nil).ValidateWorktreeExists), repoURL, branch)
}
