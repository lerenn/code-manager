// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=../mocks/workspace.gen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	logger "github.com/lerenn/code-manager/pkg/logger"
	interfaces "github.com/lerenn/code-manager/pkg/mode/workspace/interfaces"
	status "github.com/lerenn/code-manager/pkg/status"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkspace is a mock of Workspace interface.
type MockWorkspace struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceMockRecorder
	isgomock struct{}
}

// MockWorkspaceMockRecorder is the mock recorder for MockWorkspace.
type MockWorkspaceMockRecorder struct {
	mock *MockWorkspace
}

// NewMockWorkspace creates a new mock instance.
func NewMockWorkspace(ctrl *gomock.Controller) *MockWorkspace {
	mock := &MockWorkspace{ctrl: ctrl}
	mock.recorder = &MockWorkspaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspace) EXPECT() *MockWorkspaceMockRecorder {
	return m.recorder
}

// CreateWorktree mocks base method.
func (m *MockWorkspace) CreateWorktree(branch string, opts ...interfaces.CreateWorktreeOpts) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{branch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorktree", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorktree indicates an expected call of CreateWorktree.
func (mr *MockWorkspaceMockRecorder) CreateWorktree(branch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{branch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorktree", reflect.TypeOf((*MockWorkspace)(nil).CreateWorktree), varargs...)
}

// DeleteAllWorktrees mocks base method.
func (m *MockWorkspace) DeleteAllWorktrees(force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllWorktrees", force)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllWorktrees indicates an expected call of DeleteAllWorktrees.
func (mr *MockWorkspaceMockRecorder) DeleteAllWorktrees(force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllWorktrees", reflect.TypeOf((*MockWorkspace)(nil).DeleteAllWorktrees), force)
}

// DeleteWorktree mocks base method.
func (m *MockWorkspace) DeleteWorktree(branch string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorktree", branch, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorktree indicates an expected call of DeleteWorktree.
func (mr *MockWorkspaceMockRecorder) DeleteWorktree(branch, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorktree", reflect.TypeOf((*MockWorkspace)(nil).DeleteWorktree), branch, force)
}

// GetName mocks base method.
func (m *MockWorkspace) GetName(config interfaces.Config, filename string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName", config, filename)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockWorkspaceMockRecorder) GetName(config, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockWorkspace)(nil).GetName), config, filename)
}

// ListWorktrees mocks base method.
func (m *MockWorkspace) ListWorktrees() ([]status.WorktreeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorktrees")
	ret0, _ := ret[0].([]status.WorktreeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorktrees indicates an expected call of ListWorktrees.
func (mr *MockWorkspaceMockRecorder) ListWorktrees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorktrees", reflect.TypeOf((*MockWorkspace)(nil).ListWorktrees))
}

// Load mocks base method.
func (m *MockWorkspace) Load() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockWorkspaceMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockWorkspace)(nil).Load))
}

// ParseFile mocks base method.
func (m *MockWorkspace) ParseFile(filename string) (interfaces.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseFile", filename)
	ret0, _ := ret[0].(interfaces.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseFile indicates an expected call of ParseFile.
func (mr *MockWorkspaceMockRecorder) ParseFile(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseFile", reflect.TypeOf((*MockWorkspace)(nil).ParseFile), filename)
}

// SetLogger mocks base method.
func (m *MockWorkspace) SetLogger(arg0 logger.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockWorkspaceMockRecorder) SetLogger(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockWorkspace)(nil).SetLogger), arg0)
}

// Validate mocks base method.
func (m *MockWorkspace) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockWorkspaceMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockWorkspace)(nil).Validate))
}

// ValidateWorkspaceReferences mocks base method.
func (m *MockWorkspace) ValidateWorkspaceReferences() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateWorkspaceReferences")
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateWorkspaceReferences indicates an expected call of ValidateWorkspaceReferences.
func (mr *MockWorkspaceMockRecorder) ValidateWorkspaceReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateWorkspaceReferences", reflect.TypeOf((*MockWorkspace)(nil).ValidateWorkspaceReferences))
}
