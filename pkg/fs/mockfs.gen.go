// Code generated by MockGen. DO NOT EDIT.
// Source: fs.go
//
// Generated by this command:
//
//	mockgen -source=fs.go -destination=mockfs.gen.go -package=fs
//

// Package fs is a generated GoMock package.
package fs

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFS is a mock of FS interface.
type MockFS struct {
	ctrl     *gomock.Controller
	recorder *MockFSMockRecorder
	isgomock struct{}
}

// MockFSMockRecorder is the mock recorder for MockFS.
type MockFSMockRecorder struct {
	mock *MockFS
}

// NewMockFS creates a new mock instance.
func NewMockFS(ctrl *gomock.Controller) *MockFS {
	mock := &MockFS{ctrl: ctrl}
	mock.recorder = &MockFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFS) EXPECT() *MockFSMockRecorder {
	return m.recorder
}

// CreateDirectory mocks base method.
func (m *MockFS) CreateDirectory(path string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectory", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDirectory indicates an expected call of CreateDirectory.
func (mr *MockFSMockRecorder) CreateDirectory(path, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectory", reflect.TypeOf((*MockFS)(nil).CreateDirectory), path, perm)
}

// CreateFileIfNotExists mocks base method.
func (m *MockFS) CreateFileIfNotExists(filename string, initialContent []byte, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileIfNotExists", filename, initialContent, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFileIfNotExists indicates an expected call of CreateFileIfNotExists.
func (mr *MockFSMockRecorder) CreateFileIfNotExists(filename, initialContent, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileIfNotExists", reflect.TypeOf((*MockFS)(nil).CreateFileIfNotExists), filename, initialContent, perm)
}

// CreateFileWithContent mocks base method.
func (m *MockFS) CreateFileWithContent(path string, content []byte, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileWithContent", path, content, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFileWithContent indicates an expected call of CreateFileWithContent.
func (mr *MockFSMockRecorder) CreateFileWithContent(path, content, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileWithContent", reflect.TypeOf((*MockFS)(nil).CreateFileWithContent), path, content, perm)
}

// ExecuteCommand mocks base method.
func (m *MockFS) ExecuteCommand(command string, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{command}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteCommand", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteCommand indicates an expected call of ExecuteCommand.
func (mr *MockFSMockRecorder) ExecuteCommand(command any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{command}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCommand", reflect.TypeOf((*MockFS)(nil).ExecuteCommand), varargs...)
}

// Exists mocks base method.
func (m *MockFS) Exists(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockFSMockRecorder) Exists(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockFS)(nil).Exists), path)
}

// ExpandPath mocks base method.
func (m *MockFS) ExpandPath(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandPath", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandPath indicates an expected call of ExpandPath.
func (mr *MockFSMockRecorder) ExpandPath(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandPath", reflect.TypeOf((*MockFS)(nil).ExpandPath), path)
}

// FileLock mocks base method.
func (m *MockFS) FileLock(filename string) (func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileLock", filename)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileLock indicates an expected call of FileLock.
func (mr *MockFSMockRecorder) FileLock(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileLock", reflect.TypeOf((*MockFS)(nil).FileLock), filename)
}

// GetHomeDir mocks base method.
func (m *MockFS) GetHomeDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomeDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHomeDir indicates an expected call of GetHomeDir.
func (mr *MockFSMockRecorder) GetHomeDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomeDir", reflect.TypeOf((*MockFS)(nil).GetHomeDir))
}

// Glob mocks base method.
func (m *MockFS) Glob(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Glob", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Glob indicates an expected call of Glob.
func (mr *MockFSMockRecorder) Glob(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Glob", reflect.TypeOf((*MockFS)(nil).Glob), pattern)
}

// IsDir mocks base method.
func (m *MockFS) IsDir(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDir indicates an expected call of IsDir.
func (mr *MockFSMockRecorder) IsDir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDir", reflect.TypeOf((*MockFS)(nil).IsDir), path)
}

// IsDirectoryWritable mocks base method.
func (m *MockFS) IsDirectoryWritable(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDirectoryWritable", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDirectoryWritable indicates an expected call of IsDirectoryWritable.
func (mr *MockFSMockRecorder) IsDirectoryWritable(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDirectoryWritable", reflect.TypeOf((*MockFS)(nil).IsDirectoryWritable), path)
}

// IsNotExist mocks base method.
func (m *MockFS) IsNotExist(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotExist", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotExist indicates an expected call of IsNotExist.
func (mr *MockFSMockRecorder) IsNotExist(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotExist", reflect.TypeOf((*MockFS)(nil).IsNotExist), err)
}

// IsPathWithinBase mocks base method.
func (m *MockFS) IsPathWithinBase(basePath, targetPath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPathWithinBase", basePath, targetPath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPathWithinBase indicates an expected call of IsPathWithinBase.
func (mr *MockFSMockRecorder) IsPathWithinBase(basePath, targetPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPathWithinBase", reflect.TypeOf((*MockFS)(nil).IsPathWithinBase), basePath, targetPath)
}

// MkdirAll mocks base method.
func (m *MockFS) MkdirAll(path string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockFSMockRecorder) MkdirAll(path, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockFS)(nil).MkdirAll), path, perm)
}

// ReadDir mocks base method.
func (m *MockFS) ReadDir(path string) ([]os.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", path)
	ret0, _ := ret[0].([]os.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockFSMockRecorder) ReadDir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockFS)(nil).ReadDir), path)
}

// ReadFile mocks base method.
func (m *MockFS) ReadFile(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFSMockRecorder) ReadFile(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFS)(nil).ReadFile), path)
}

// RemoveAll mocks base method.
func (m *MockFS) RemoveAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockFSMockRecorder) RemoveAll(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockFS)(nil).RemoveAll), path)
}

// Which mocks base method.
func (m *MockFS) Which(command string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Which", command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Which indicates an expected call of Which.
func (mr *MockFSMockRecorder) Which(command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Which", reflect.TypeOf((*MockFS)(nil).Which), command)
}

// WriteFileAtomic mocks base method.
func (m *MockFS) WriteFileAtomic(filename string, data []byte, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFileAtomic", filename, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFileAtomic indicates an expected call of WriteFileAtomic.
func (mr *MockFSMockRecorder) WriteFileAtomic(filename, data, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFileAtomic", reflect.TypeOf((*MockFS)(nil).WriteFileAtomic), filename, data, perm)
}
