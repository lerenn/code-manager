// Code generated by MockGen. DO NOT EDIT.
// Source: ide.go
//
// Generated by this command:
//
//	mockgen -source=ide.go -destination=mockide.gen.go -package=ide
//

// Package ide is a generated GoMock package.
package ide

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIDE is a mock of IDE interface.
type MockIDE struct {
	ctrl     *gomock.Controller
	recorder *MockIDEMockRecorder
	isgomock struct{}
}

// MockIDEMockRecorder is the mock recorder for MockIDE.
type MockIDEMockRecorder struct {
	mock *MockIDE
}

// NewMockIDE creates a new mock instance.
func NewMockIDE(ctrl *gomock.Controller) *MockIDE {
	mock := &MockIDE{ctrl: ctrl}
	mock.recorder = &MockIDEMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDE) EXPECT() *MockIDEMockRecorder {
	return m.recorder
}

// IsInstalled mocks base method.
func (m *MockIDE) IsInstalled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInstalled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInstalled indicates an expected call of IsInstalled.
func (mr *MockIDEMockRecorder) IsInstalled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInstalled", reflect.TypeOf((*MockIDE)(nil).IsInstalled))
}

// Name mocks base method.
func (m *MockIDE) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIDEMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIDE)(nil).Name))
}

// OpenRepository mocks base method.
func (m *MockIDE) OpenRepository(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenRepository", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenRepository indicates an expected call of OpenRepository.
func (mr *MockIDEMockRecorder) OpenRepository(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenRepository", reflect.TypeOf((*MockIDE)(nil).OpenRepository), path)
}

// MockManagerInterface is a mock of ManagerInterface interface.
type MockManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockManagerInterfaceMockRecorder is the mock recorder for MockManagerInterface.
type MockManagerInterfaceMockRecorder struct {
	mock *MockManagerInterface
}

// NewMockManagerInterface creates a new mock instance.
func NewMockManagerInterface(ctrl *gomock.Controller) *MockManagerInterface {
	mock := &MockManagerInterface{ctrl: ctrl}
	mock.recorder = &MockManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerInterface) EXPECT() *MockManagerInterfaceMockRecorder {
	return m.recorder
}

// GetIDE mocks base method.
func (m *MockManagerInterface) GetIDE(name string) (IDE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDE", name)
	ret0, _ := ret[0].(IDE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDE indicates an expected call of GetIDE.
func (mr *MockManagerInterfaceMockRecorder) GetIDE(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDE", reflect.TypeOf((*MockManagerInterface)(nil).GetIDE), name)
}

// OpenIDE mocks base method.
func (m *MockManagerInterface) OpenIDE(name, path string, verbose bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenIDE", name, path, verbose)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenIDE indicates an expected call of OpenIDE.
func (mr *MockManagerInterfaceMockRecorder) OpenIDE(name, path, verbose any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenIDE", reflect.TypeOf((*MockManagerInterface)(nil).OpenIDE), name, path, verbose)
}
