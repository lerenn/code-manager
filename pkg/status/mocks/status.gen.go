// Code generated by MockGen. DO NOT EDIT.
// Source: status.go
//
// Generated by this command:
//
//	mockgen -source=status.go -destination=mocks/status.gen.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	status "github.com/lerenn/code-manager/pkg/status"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AddRepository mocks base method.
func (m *MockManager) AddRepository(repoURL string, params status.AddRepositoryParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepository", repoURL, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRepository indicates an expected call of AddRepository.
func (mr *MockManagerMockRecorder) AddRepository(repoURL, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepository", reflect.TypeOf((*MockManager)(nil).AddRepository), repoURL, params)
}

// AddWorkspace mocks base method.
func (m *MockManager) AddWorkspace(workspacePath string, params status.AddWorkspaceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkspace", workspacePath, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWorkspace indicates an expected call of AddWorkspace.
func (mr *MockManagerMockRecorder) AddWorkspace(workspacePath, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkspace", reflect.TypeOf((*MockManager)(nil).AddWorkspace), workspacePath, params)
}

// AddWorktree mocks base method.
func (m *MockManager) AddWorktree(params status.AddWorktreeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorktree", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWorktree indicates an expected call of AddWorktree.
func (mr *MockManagerMockRecorder) AddWorktree(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorktree", reflect.TypeOf((*MockManager)(nil).AddWorktree), params)
}

// CreateInitialStatus mocks base method.
func (m *MockManager) CreateInitialStatus() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInitialStatus")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInitialStatus indicates an expected call of CreateInitialStatus.
func (mr *MockManagerMockRecorder) CreateInitialStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInitialStatus", reflect.TypeOf((*MockManager)(nil).CreateInitialStatus))
}

// GetRepository mocks base method.
func (m *MockManager) GetRepository(repoURL string) (*status.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", repoURL)
	ret0, _ := ret[0].(*status.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockManagerMockRecorder) GetRepository(repoURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockManager)(nil).GetRepository), repoURL)
}

// GetWorkspace mocks base method.
func (m *MockManager) GetWorkspace(workspacePath string) (*status.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspace", workspacePath)
	ret0, _ := ret[0].(*status.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspace indicates an expected call of GetWorkspace.
func (mr *MockManagerMockRecorder) GetWorkspace(workspacePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspace", reflect.TypeOf((*MockManager)(nil).GetWorkspace), workspacePath)
}

// GetWorktree mocks base method.
func (m *MockManager) GetWorktree(repoURL, branch string) (*status.WorktreeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorktree", repoURL, branch)
	ret0, _ := ret[0].(*status.WorktreeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorktree indicates an expected call of GetWorktree.
func (mr *MockManagerMockRecorder) GetWorktree(repoURL, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorktree", reflect.TypeOf((*MockManager)(nil).GetWorktree), repoURL, branch)
}

// ListRepositories mocks base method.
func (m *MockManager) ListRepositories() (map[string]status.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories")
	ret0, _ := ret[0].(map[string]status.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockManagerMockRecorder) ListRepositories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockManager)(nil).ListRepositories))
}

// ListWorkspaces mocks base method.
func (m *MockManager) ListWorkspaces() (map[string]status.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaces")
	ret0, _ := ret[0].(map[string]status.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaces indicates an expected call of ListWorkspaces.
func (mr *MockManagerMockRecorder) ListWorkspaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaces", reflect.TypeOf((*MockManager)(nil).ListWorkspaces))
}

// RemoveWorkspace mocks base method.
func (m *MockManager) RemoveWorkspace(workspaceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWorkspace", workspaceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWorkspace indicates an expected call of RemoveWorkspace.
func (mr *MockManagerMockRecorder) RemoveWorkspace(workspaceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWorkspace", reflect.TypeOf((*MockManager)(nil).RemoveWorkspace), workspaceName)
}

// RemoveWorktree mocks base method.
func (m *MockManager) RemoveWorktree(repoURL, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWorktree", repoURL, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWorktree indicates an expected call of RemoveWorktree.
func (mr *MockManagerMockRecorder) RemoveWorktree(repoURL, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWorktree", reflect.TypeOf((*MockManager)(nil).RemoveWorktree), repoURL, branch)
}

// UpdateWorkspace mocks base method.
func (m *MockManager) UpdateWorkspace(workspaceName string, workspace status.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspace", workspaceName, workspace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkspace indicates an expected call of UpdateWorkspace.
func (mr *MockManagerMockRecorder) UpdateWorkspace(workspaceName, workspace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspace", reflect.TypeOf((*MockManager)(nil).UpdateWorkspace), workspaceName, workspace)
}
