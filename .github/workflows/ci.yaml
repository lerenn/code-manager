name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Run linter
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: dagger/dagger-for-github@8.0.0
        with:
          version: latest
          verb: call
          args: lint --source-dir=. stdout

  unit-tests:
    name: Run unit tests
    needs: ["lint"]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: dagger/dagger-for-github@8.0.0
        with:
          version: latest
          verb: call
          args: unit-tests --source-dir=. stdout

  integration-tests:
    name: Run integration tests
    needs: ["lint", "unit-tests"]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: dagger/dagger-for-github@8.0.0
        with:
          version: latest
          verb: call
          args: integration-tests --source-dir=. stdout

  end-to-end-tests:
    name: Run end-to-end tests
    needs: ["lint", "unit-tests", "integration-tests"]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: dagger/dagger-for-github@8.0.0
        with:
          version: latest
          verb: call
          args: end-to-end-tests --source-dir=. stdout

  publish-tag:
    name: Publish the tag of the new version
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - uses: dagger/dagger-for-github@8.0.0
        with:
          version: latest
          verb: call
          args: >-
            publish-tag
            --source-dir=.
            --user=${{ github.actor }}
            --token=env:GITHUB_TOKEN
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-docker-images:
    name: Build and push Docker images
    needs: ["publish-tag"]
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dagger/dagger-for-github@8.0.0
        with:
          version: latest
          verb: call
          args: >-
            build-and-push-docker-images
            --source-dir=.
            --user=${{ github.actor }}
            --token=env:GITHUB_TOKEN
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-github-release:
    name: Create GitHub release with binaries
    needs: ["publish-tag"]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dagger/dagger-for-github@8.0.0
        with:
          version: latest
          verb: call
          args: >-
            create-github-release
            --source-dir=.
            --user=${{ github.actor }}
            --token=env:GITHUB_TOKEN
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}